# Database for the records specific to the Thorlabs CCS.
# Hinko Kocevar
# January 2015

include "ADBase.template"

#
# These are the records that we modify from NDFile.template
#

record(mbbo, "$(P)$(R)FileFormat")
{
	field(ZRST, "RAW")
	field(ZRVL, "0")
	field(ONST, "BMP")
	field(ONVL, "1")
}

record(mbbi, "$(P)$(R)FileFormat_RBV")
{
	field(ZRST, "RAW")
	field(ZRVL, "0")
	field(ONST, "BMP")
	field(ONVL, "1")
}

#
# These are the records that we modify from ADBase.template
#

record(mbbo, "$(P)$(R)ImageMode")
{
	field(ZRST, "Single")
	field(ZRVL, "0")
	field(ONST, "Continuous")
	field(ONVL, "2")
	field(TWST, "")
	field(TWVL, "")
	field(VAL,  "0")
}

record(mbbi, "$(P)$(R)ImageMode_RBV")
{
	field(ZRST, "Single")
	field(ZRVL, "0")
	field(ONST, "Continuous")
	field(ONVL, "2")
	field(TWST, "")
	field(TWVL, "")
	field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)TriggerMode")
{
	field(ZRST, "Internal")
	field(ZRVL, "0")
	field(ONST, "External")
	field(ONVL, "1")
	field(VAL,  "0")
}

record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
	field(ZRST, "Internal")
	field(ZRVL, "0")
	field(ONST, "External")
	field(ONVL, "1")
}

record(mbbo, "$(P)$(R)DataType")
{
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))DATA_TYPE")
	field(ZRST, "Float64")
	field(ZRVL, "7")
	field(ONST, "")
	field(ONVL, "")
	field(TWST, "")
	field(TWVL, "")
	field(THST, "")
	field(THVL, "")
	field(FRST, "")
	field(FRVL, "")
	field(FVST, "")
	field(FVVL, "")
	field(SXST, "")
	field(SXVL, "")
	field(SVST, "")
	field(SVVL, "")
}

record(mbbi, "$(P)$(R)DataType_RBV")
{
	field(ZRST, "Float64")
	field(ZRVL, "7")
	field(ONST, "")
	field(ONVL, "")
	field(TWST, "")
	field(TWVL, "")
	field(THST, "")
	field(THVL, "")
	field(FRST, "")
	field(FRVL, "")
	field(FVST, "")
	field(FVVL, "")
	field(SXST, "")
	field(SXVL, "")
	field(SVST, "")
	field(SVVL, "")
}


#
# These are the records that are new for the Thorlabs spectrometer 
#

# Status message not related to data acquisition (error messages, information messages, etc.)
record(waveform, "$(P)$(R)TlMessage_RBV")
{
	field(DTYP, "asynOctetRead")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_MESSAGE")
	field(FTVL, "CHAR")
	field(NELM, "256")
	field(SCAN, "I/O Intr")
}

# Amplitude data manipulation

record(waveform, "$(P)$(R)TlAmplitudeData")
{
	field(DTYP, "asynFloat64ArrayOut")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA")
	field(FTVL, "DOUBLE")
	field(NELM, "$(NELEMENTS)")
	field(LOPR, "0.001")
	field(HOPR, "1000.0")
	field(PREC, "3")
}

record(waveform, "$(P)$(R)TlAmplitudeData_RBV")
{
	field(DTYP, "asynFloat64ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA")
	field(FTVL, "DOUBLE")
	field(NELM, "$(NELEMENTS)")
	field(SCAN, "Passive")
	field(LOPR, "0.001")
	field(HOPR, "1000.0")
	field(PREC, "3")
	field(PINI, "YES")
}

record(aSub, "$(P)$(R)TlAmplitudeDataCopy")
{
	field(SNAM, "tlCCSAmplitudeDataCopy")
	field(FTA,  "DOUBLE")
	field(FTVA, "DOUBLE")
	field(NOA,  "$(NELEMENTS)")
	field(NOVA, "$(NELEMENTS)")
	field(INPA, "$(P)$(R)TlAmplitudeData_RBV NPP NMS")
	field(OUTA, "$(P)$(R)TlAmplitudeData PP NMS")
}

record(mbbo, "$(P)$(R)TlAmplitudeDataMode")
{
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA_MODE")
	field(ZRST, "Current")
	field(ZRVL, "1")
	field(ONST, "NV Memory")
	field(ONVL, "2")
	field(VAL,  "0")
}

record(mbbi, "$(P)$(R)TlAmplitudeDataMode_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA_MODE")
	field(ZRST, "Current")
	field(ZRVL, "1")
	field(ONST, "NV Memory")
	field(ONVL, "2")
	field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)TlAmplitudeDataTarget")
{
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA_TARGET")
	field(ZRST, "Factory")
	field(ZRVL, "0")
	field(ONST, "User")
	field(ONVL, "1")
	field(TWST, "Thorlabs")
	field(TWVL, "2")
	field(VAL,  "0")
}

record(mbbi, "$(P)$(R)TlAmplitudeDataTarget_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA_TARGET")
	field(ZRST, "Factory")
	field(ZRVL, "0")
	field(ONST, "User")
	field(ONVL, "1")
	field(TWST, "Thorlabs")
	field(TWVL, "2")
	field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)TlAmplitudeDataSet")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA_SET")
	field(VAL,  "0")
}

record(bo, "$(P)$(R)TlAmplitudeDataGet")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_AMPLITUDE_DATA_GET")
	field(VAL,  "0")
	field(FLNK, "$(P)$(R)TlAmplitudeData_RBV")
}

# Wavelength Data manipulation

record(waveform, "$(P)$(R)TlWavelengthPixelArray")
{
	field(DTYP, "asynInt32ArrayOut")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_PIXEL_ARRAY")
	field(FTVL, "LONG")
	field(NELM, "10")
}

record(waveform, "$(P)$(R)TlWavelengthArray")
{
	field(DTYP, "asynFloat64ArrayOut")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_ARRAY")
	field(FTVL, "DOUBLE")
	field(NELM, "10")
	field(PREC, "3")
}

record(waveform, "$(P)$(R)TlWavelengthData_RBV")
{
	field(DTYP, "asynFloat64ArrayIn")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_DATA")
	field(FTVL, "DOUBLE")
	field(NELM, "$(NELEMENTS)")
	field(SCAN, "Passive")
	field(PREC, "3")
	field(PINI, "YES")
	field(FLNK, "$(P)$(R)TlWavelengthMinimum")
}

record(aSub, "$(P)$(R)TlWavelengthArrayInit")
{
	field(SNAM, "tlCCSWavelengthArrayInit")
	field(FTA,  "DOUBLE")
	field(FTVA, "DOUBLE")
	field(NOA,  "0")
	field(NOVA, "10")
	field(INPA, "")
	field(OUTA, "$(P)$(R)TlWavelengthArray PP NMS")
	field(FTB,  "LONG")
	field(FTVB, "LONG")
	field(NOB,  "0")
	field(NOVB, "10")
	field(INPB, "")
	field(OUTB, "$(P)$(R)TlWavelengthPixelArray PP NMS")
	field(PINI, "YES")
}

record(mbbo, "$(P)$(R)TlWavelengthDataTarget")
{
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_DATA_TARGET")
	field(ZRST, "Factory")
	field(ZRVL, "0")
	field(ONST, "User")
	field(ONVL, "1")
	field(VAL,  "0")
}

record(mbbi, "$(P)$(R)TlWavelengthDataTarget_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_DATA_TARGET")
	field(ZRST, "Factory")
	field(ZRVL, "0")
	field(ONST, "User")
	field(ONVL, "1")
	field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)TlWavelengthDataSet")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_DATA_SET")
	field(VAL,  "0")
}

record(bo, "$(P)$(R)TlWavelengthDataGet")
{
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_DATA_GET")
	field(VAL,  "0")
	field(FLNK, "$(P)$(R)TlWavelengthData_RBV")
}

record(ai, "$(P)$(R)TlWavelengthMinimum")
{
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_MINIMUM")
	field(VAL,  "0")
	field(SCAN, "I/O Intr")
	field(PREC, "3")
	field(FLNK, "$(P)$(R)TlWavelengthMaximum")
}

record(ai, "$(P)$(R)TlWavelengthMaximum")
{
	field(DTYP, "asynFloat64")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_WAVELENGTH_MAXIMUM")
	field(VAL,  "0")
	field(PREC, "3")
	field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)TlAcquisitionType")
{
	field(PINI, "YES")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_ACQUISITION_TYPE")
	field(ZRST, "Raw")
	field(ZRVL, "0")
	field(ONST, "Processed")
	field(ONVL, "1")
	field(VAL,  "1")
}

record(mbbi, "$(P)$(R)TlAcquisitionType_RBV")
{
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TL_ACQUISITION_TYPE")
	field(ZRST, "Raw")
	field(ZRVL, "0")
	field(ONST, "Processed")
	field(ONVL, "1")
	field(SCAN, "I/O Intr")
}

#
# Records in ADBase that do not apply to Thorlabs
#

record(mbbo, "$(P)$(R)ColorMode")
{
	field(DISA, "1")
}
record(mbbi, "$(P)$(R)ColorMode_RBV")
{
	field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseX")
{
	field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseX_RBV")
{
	field(DISA, "1")
}
record(bo, "$(P)$(R)ReverseY")
{
	field(DISA, "1")
}
record(bi, "$(P)$(R)ReverseY_RBV")
{
	field(DISA, "1")
}
record(ao, "$(P)$(R)AcquirePeriod")
{
	field(DISA, "1")
}
record(ai, "$(P)$(R)AcquirePeriod_RBV")
{
	field(DISA, "1")
}
record(longout, "$(P)$(R)NumExposures")
{
	field(DISA, "1")
}
record(longin, "$(P)$(R)NumExposures_RBV")
{
	field(DISA, "1")
}
record(ai, "$(P)$(R)TimeRemaining_RBV")
{
	field(DISA, "1")
}
record(longout, "$(P)$(R)NumImages")
{
	field(DISA, "1")
}
record(longin, "$(P)$(R)NumImages_RBV")
{
	field(DISA, "1")
}
